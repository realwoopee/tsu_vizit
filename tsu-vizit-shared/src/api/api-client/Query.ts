//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './Client'
export { Client };
import type { AxiosRequestConfig } from 'axios';



export type SessionQueryParameters = {
  id: string ;
}

export function loginUrl(): string {
  let url_ = getBaseUrl() + "/api/auth/login";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function loginMutationKey(): MutationKey {
  return trimArrayEnd([
      'Client',
      'login',
    ]);
}

/**
 * @param body (optional) 
 * @return OK
 */
export function useLoginMutation<TContext>(options?: Omit<UseMutationOptions<Types.LoginResultDto, unknown, Types.UserLoginModel, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.LoginResultDto, unknown, Types.UserLoginModel, TContext> {
  const key = loginMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.UserLoginModel) => Client.login(body),
    mutationKey: key,
  });
}
  
export function refreshUrl(): string {
  let url_ = getBaseUrl() + "/api/auth/refresh";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function refreshMutationKey(): MutationKey {
  return trimArrayEnd([
      'Client',
      'refresh',
    ]);
}

/**
 * @param body (optional) 
 * @return OK
 */
export function useRefreshMutation<TContext>(options?: Omit<UseMutationOptions<Types.LoginResultDto, unknown, string, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.LoginResultDto, unknown, string, TContext> {
  const key = refreshMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: string) => Client.refresh(body),
    mutationKey: key,
  });
}
  
export function changePasswordUrl(): string {
  let url_ = getBaseUrl() + "/api/auth/change-password";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function changePasswordMutationKey(): MutationKey {
  return trimArrayEnd([
      'Client',
      'changePassword',
    ]);
}

/**
 * @param body (optional) 
 * @return OK
 */
export function useChangePasswordMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, Types.UserChangePasswordModel, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.UserChangePasswordModel, TContext> {
  const key = changePasswordMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.UserChangePasswordModel) => Client.changePassword(body),
    mutationKey: key,
  });
}
  
export function registerUrl(): string {
  let url_ = getBaseUrl() + "/api/register";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function registerMutationKey(): MutationKey {
  return trimArrayEnd([
      'Client',
      'register',
    ]);
}

/**
 * @param body (optional) 
 * @return OK
 */
export function useRegisterMutation<TContext>(options?: Omit<UseMutationOptions<Types.LoginResultDto, unknown, Types.UserRegisterModel, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.LoginResultDto, unknown, Types.UserRegisterModel, TContext> {
  const key = registerMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.UserRegisterModel) => Client.register(body),
    mutationKey: key,
  });
}
  
export function sessionAllUrl(): string {
  let url_ = getBaseUrl() + "/api/session";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let sessionAllDefaultOptions: Omit<UseQueryOptions<Types.SessionDto[], unknown, Types.SessionDto[]>, 'queryKey'> = {
  queryFn: __sessionAll,
};
export function getSessionAllDefaultOptions() {
  return sessionAllDefaultOptions;
};
export function setSessionAllDefaultOptions(options: typeof sessionAllDefaultOptions) {
  sessionAllDefaultOptions = options;
}

export function sessionAllQueryKey(): QueryKey;
export function sessionAllQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'Client',
      'sessionAll',
    ]);
}
function __sessionAll() {
  return Client.sessionAll(
    );
}

/**
 * @return OK
 */
export function useSessionAllQuery<TSelectData = Types.SessionDto[], TError = unknown>(options?: Omit<UseQueryOptions<Types.SessionDto[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useSessionAllQuery<TSelectData = Types.SessionDto[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.SessionDto[], TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  if (axiosConfig) {
    options = options ?? { } as any;
    options!.meta = { ...options!.meta, axiosConfig };
  }

  return useQuery<Types.SessionDto[], TError, TSelectData>({
    queryFn: __sessionAll,
    queryKey: sessionAllQueryKey(),
    ...sessionAllDefaultOptions as unknown as Omit<UseQueryOptions<Types.SessionDto[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * @return OK
 */
export function setSessionAllData(queryClient: QueryClient, updater: (data: Types.SessionDto[] | undefined) => Types.SessionDto[], ) {
  queryClient.setQueryData(sessionAllQueryKey(),
    updater
  );
}

/**
 * @return OK
 */
export function setSessionAllDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.SessionDto[] | undefined) => Types.SessionDto[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function currentUrl(): string {
  let url_ = getBaseUrl() + "/api/session/current";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let currentDefaultOptions: Omit<UseQueryOptions<Types.SessionDto[], unknown, Types.SessionDto[]>, 'queryKey'> = {
  queryFn: __current,
};
export function getCurrentDefaultOptions() {
  return currentDefaultOptions;
};
export function setCurrentDefaultOptions(options: typeof currentDefaultOptions) {
  currentDefaultOptions = options;
}

export function currentQueryKey(): QueryKey;
export function currentQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'Client',
      'current',
    ]);
}
function __current() {
  return Client.current(
    );
}

/**
 * @return OK
 */
export function useCurrentQuery<TSelectData = Types.SessionDto[], TError = unknown>(options?: Omit<UseQueryOptions<Types.SessionDto[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useCurrentQuery<TSelectData = Types.SessionDto[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.SessionDto[], TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  if (axiosConfig) {
    options = options ?? { } as any;
    options!.meta = { ...options!.meta, axiosConfig };
  }

  return useQuery<Types.SessionDto[], TError, TSelectData>({
    queryFn: __current,
    queryKey: currentQueryKey(),
    ...currentDefaultOptions as unknown as Omit<UseQueryOptions<Types.SessionDto[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * @return OK
 */
export function setCurrentData(queryClient: QueryClient, updater: (data: Types.SessionDto[] | undefined) => Types.SessionDto[], ) {
  queryClient.setQueryData(currentQueryKey(),
    updater
  );
}

/**
 * @return OK
 */
export function setCurrentDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.SessionDto[] | undefined) => Types.SessionDto[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function sessionUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/session/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function sessionMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'Client',
      'session',
      id as any,
    ]);
}

/**
 * @return OK
 */
export function useSessionMutation<TContext>(id: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = sessionMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.session(id),
    mutationKey: key,
  });
}
  
type Session__MutationParameters = SessionQueryParameters

/**
 * @return OK
 */
export function useSessionMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, Session__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: SessionQueryParameters}): UseMutationResult<void, unknown, Session__MutationParameters, TContext> {
  const key = sessionMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Session__MutationParameters) => Client.session(data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}
  
export function profileGETUrl(): string {
  let url_ = getBaseUrl() + "/api/account/profile";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let profileGETDefaultOptions: Omit<UseQueryOptions<Types.UserDto, unknown, Types.UserDto>, 'queryKey'> = {
  queryFn: __profileGET,
};
export function getProfileGETDefaultOptions() {
  return profileGETDefaultOptions;
};
export function setProfileGETDefaultOptions(options: typeof profileGETDefaultOptions) {
  profileGETDefaultOptions = options;
}

export function profileGETQueryKey(): QueryKey;
export function profileGETQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'Client',
      'profileGET',
    ]);
}
function __profileGET() {
  return Client.profileGET(
    );
}

/**
 * @return OK
 */
export function useProfileGETQuery<TSelectData = Types.UserDto, TError = unknown>(options?: Omit<UseQueryOptions<Types.UserDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useProfileGETQuery<TSelectData = Types.UserDto, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.UserDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  if (axiosConfig) {
    options = options ?? { } as any;
    options!.meta = { ...options!.meta, axiosConfig };
  }

  return useQuery<Types.UserDto, TError, TSelectData>({
    queryFn: __profileGET,
    queryKey: profileGETQueryKey(),
    ...profileGETDefaultOptions as unknown as Omit<UseQueryOptions<Types.UserDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * @return OK
 */
export function setProfileGETData(queryClient: QueryClient, updater: (data: Types.UserDto | undefined) => Types.UserDto, ) {
  queryClient.setQueryData(profileGETQueryKey(),
    updater
  );
}

/**
 * @return OK
 */
export function setProfileGETDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.UserDto | undefined) => Types.UserDto) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function profilePUTUrl(): string {
  let url_ = getBaseUrl() + "/api/account/profile";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function profilePUTMutationKey(): MutationKey {
  return trimArrayEnd([
      'Client',
      'profilePUT',
    ]);
}

/**
 * @param body (optional) 
 * @return OK
 */
export function useProfilePUTMutation<TContext>(options?: Omit<UseMutationOptions<Types.UserDto, unknown, Types.UserEditProfileModel, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.UserDto, unknown, Types.UserEditProfileModel, TContext> {
  const key = profilePUTMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.UserEditProfileModel) => Client.profilePUT(body),
    mutationKey: key,
  });
}