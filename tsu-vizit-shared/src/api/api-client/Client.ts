//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../api-client.types';
import { getAxios, getBaseUrl } from './helpers';

/**
 * @param body (optional) 
 * @return OK
 */
export function login(body?: Types.UserLoginModel | undefined, config?: AxiosRequestConfig | undefined): Promise<Types.LoginResultDto> {
    let url_ = getBaseUrl() + "/api/auth/login";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeUserLoginModel(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigLogin,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigLogin?.headers,
            "Content-Type": "application/json",
            "Accept": "text/plain"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processLogin(_response);
    });
}

function processLogin(response: AxiosResponse): Promise<Types.LoginResultDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initProblemDetails(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initProblemDetails(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initProblemDetails(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initLoginResultDto(resultData200);
        return Promise.resolve<Types.LoginResultDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.LoginResultDto>(null as any);
}

/**
 * @param body (optional) 
 * @return OK
 */
export function refresh(body?: string | undefined, config?: AxiosRequestConfig | undefined): Promise<Types.LoginResultDto> {
    let url_ = getBaseUrl() + "/api/auth/refresh";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigRefresh,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigRefresh?.headers,
            "Content-Type": "application/json",
            "Accept": "text/plain"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processRefresh(_response);
    });
}

function processRefresh(response: AxiosResponse): Promise<Types.LoginResultDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initProblemDetails(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initProblemDetails(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initProblemDetails(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initLoginResultDto(resultData200);
        return Promise.resolve<Types.LoginResultDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.LoginResultDto>(null as any);
}

/**
 * @param body (optional) 
 * @return OK
 */
export function changePassword(body?: Types.UserChangePasswordModel | undefined, config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/api/auth/change-password";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeUserChangePasswordModel(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigChangePassword,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigChangePassword?.headers,
            "Content-Type": "application/json",
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processChangePassword(_response);
    });
}

function processChangePassword(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initProblemDetails(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initProblemDetails(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initProblemDetails(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * @param body (optional) 
 * @return OK
 */
export function register(body?: Types.UserRegisterModel | undefined, config?: AxiosRequestConfig | undefined): Promise<Types.LoginResultDto> {
    let url_ = getBaseUrl() + "/api/register";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeUserRegisterModel(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigRegister,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigRegister?.headers,
            "Content-Type": "application/json",
            "Accept": "text/plain"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processRegister(_response);
    });
}

function processRegister(response: AxiosResponse): Promise<Types.LoginResultDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initProblemDetails(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initProblemDetails(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initProblemDetails(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initLoginResultDto(resultData200);
        return Promise.resolve<Types.LoginResultDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.LoginResultDto>(null as any);
}

/**
 * @return OK
 */
export function sessionAll(config?: AxiosRequestConfig | undefined): Promise<Types.SessionDto[]> {
    let url_ = getBaseUrl() + "/api/session";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigSessionAll,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigSessionAll?.headers,
            "Accept": "text/plain"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processSessionAll(_response);
    });
}

function processSessionAll(response: AxiosResponse): Promise<Types.SessionDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initProblemDetails(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initProblemDetails(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initProblemDetails(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        if (Array.isArray(resultData200)) {
              result200 = resultData200.map(item => 
                Types.initSessionDto(item)
              );
            }
        return Promise.resolve<Types.SessionDto[]>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.SessionDto[]>(null as any);
}

/**
 * @return OK
 */
export function current(config?: AxiosRequestConfig | undefined): Promise<Types.SessionDto[]> {
    let url_ = getBaseUrl() + "/api/session/current";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigCurrent,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigCurrent?.headers,
            "Accept": "text/plain"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processCurrent(_response);
    });
}

function processCurrent(response: AxiosResponse): Promise<Types.SessionDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initProblemDetails(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initProblemDetails(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initProblemDetails(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        if (Array.isArray(resultData200)) {
              result200 = resultData200.map(item => 
                Types.initSessionDto(item)
              );
            }
        return Promise.resolve<Types.SessionDto[]>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.SessionDto[]>(null as any);
}

/**
 * @return OK
 */
export function session(id: string, config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/api/session/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigSession,
        ...config,
        method: "DELETE",
        url: url_,
        headers: {
            ..._requestConfigSession?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processSession(_response);
    });
}

function processSession(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initProblemDetails(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initProblemDetails(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initProblemDetails(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * @return OK
 */
export function profileGET(config?: AxiosRequestConfig | undefined): Promise<Types.UserDto> {
    let url_ = getBaseUrl() + "/api/account/profile";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigProfileGET,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigProfileGET?.headers,
            "Accept": "text/plain"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processProfileGET(_response);
    });
}

function processProfileGET(response: AxiosResponse): Promise<Types.UserDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initProblemDetails(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initProblemDetails(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initProblemDetails(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initUserDto(resultData200);
        return Promise.resolve<Types.UserDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.UserDto>(null as any);
}

/**
 * @param body (optional) 
 * @return OK
 */
export function profilePUT(body?: Types.UserEditProfileModel | undefined, config?: AxiosRequestConfig | undefined): Promise<Types.UserDto> {
    let url_ = getBaseUrl() + "/api/account/profile";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeUserEditProfileModel(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigProfilePUT,
        ...config,
        data: content_,
        method: "PUT",
        url: url_,
        headers: {
            ..._requestConfigProfilePUT?.headers,
            "Content-Type": "application/json",
            "Accept": "text/plain"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processProfilePUT(_response);
    });
}

function processProfilePUT(response: AxiosResponse): Promise<Types.UserDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initProblemDetails(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initProblemDetails(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initProblemDetails(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initUserDto(resultData200);
        return Promise.resolve<Types.UserDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.UserDto>(null as any);
}
let _requestConfigLogin: Partial<AxiosRequestConfig> | null;
export function getLoginRequestConfig() {
  return _requestConfigLogin;
}
export function setLoginRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigLogin = value;
}
export function patchLoginRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigLogin = patch(_requestConfigLogin ?? {});
}

let _requestConfigRefresh: Partial<AxiosRequestConfig> | null;
export function getRefreshRequestConfig() {
  return _requestConfigRefresh;
}
export function setRefreshRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigRefresh = value;
}
export function patchRefreshRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigRefresh = patch(_requestConfigRefresh ?? {});
}

let _requestConfigChangePassword: Partial<AxiosRequestConfig> | null;
export function getChangePasswordRequestConfig() {
  return _requestConfigChangePassword;
}
export function setChangePasswordRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigChangePassword = value;
}
export function patchChangePasswordRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigChangePassword = patch(_requestConfigChangePassword ?? {});
}

let _requestConfigRegister: Partial<AxiosRequestConfig> | null;
export function getRegisterRequestConfig() {
  return _requestConfigRegister;
}
export function setRegisterRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigRegister = value;
}
export function patchRegisterRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigRegister = patch(_requestConfigRegister ?? {});
}

let _requestConfigSessionAll: Partial<AxiosRequestConfig> | null;
export function getSessionAllRequestConfig() {
  return _requestConfigSessionAll;
}
export function setSessionAllRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigSessionAll = value;
}
export function patchSessionAllRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigSessionAll = patch(_requestConfigSessionAll ?? {});
}

let _requestConfigCurrent: Partial<AxiosRequestConfig> | null;
export function getCurrentRequestConfig() {
  return _requestConfigCurrent;
}
export function setCurrentRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigCurrent = value;
}
export function patchCurrentRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigCurrent = patch(_requestConfigCurrent ?? {});
}

let _requestConfigSession: Partial<AxiosRequestConfig> | null;
export function getSessionRequestConfig() {
  return _requestConfigSession;
}
export function setSessionRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigSession = value;
}
export function patchSessionRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigSession = patch(_requestConfigSession ?? {});
}

let _requestConfigProfileGET: Partial<AxiosRequestConfig> | null;
export function getProfileGETRequestConfig() {
  return _requestConfigProfileGET;
}
export function setProfileGETRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigProfileGET = value;
}
export function patchProfileGETRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigProfileGET = patch(_requestConfigProfileGET ?? {});
}

let _requestConfigProfilePUT: Partial<AxiosRequestConfig> | null;
export function getProfilePUTRequestConfig() {
  return _requestConfigProfilePUT;
}
export function setProfilePUTRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigProfilePUT = value;
}
export function patchProfilePUTRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigProfilePUT = patch(_requestConfigProfilePUT ?? {});
}